<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Turing!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title>Végtelen ciklus</title>
        <para>
            Írj olyan C végtelen ciklusokat, amelyek 0 illetve 100 százalékban dolgoztatnak egy magot és egy olyat, amely  
            100 százalékban minden magot!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/theefues/prog1/tree/master/turing/loops">https://github.com/theefues/prog1/tree/master/turing/loops</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
	</para>
	<para>

	    Jelen feladat három részből áll; írnunk kell egy olyan végtelen ciklust, amely:
            <itemizedlist>
                <listitem>
		<para> a gépben található minden processzormagot megdolgoztat 100%-on</para>
		</listitem>
                <listitem>
		<para> a gépben található összes processzormag közül egyet dolgoztat meg 100%-on</para>
		</listitem>
		<listitem>
		<para> a gépben található egyik processzormagot sem dolgoztatja</para>
                </listitem>
	    </itemizedlist>
	    A linkelt repóban megtalálható mindegyik feladat forrásfájla.&#xD;
	    Ahhoz, hogy minden processzormagot megdolgoztassunk, szükségünk van az OpenMP-re, amit a &lt;omp.h&gt; könyvtárral tudunk includeolni a programunkhoz.
	    Hozzá kell adnunk a #pragma omp parallel {} sort a kódunkhoz, és azon belül kell elhelyeznünk a végtelen ciklusunkat, ami jelen esetben egy while függvény, valahogy így:
	    <programlisting language="c"><![CDATA[#include <stdio.h>
#include <omp.h>

int main() {
	#pragma omp parallel {  /* ezzel tudjuk kiküldeni a terhelést minden magra */
           	while(1){}
        }
        return 0;
}]]>
    	    </programlisting>
	    
	    Ezt lefordítva, majd elindítva láthatjuk, hogy a terhelés mindegyik processzormagon egységes.
	    Ahhoz, hogy csak egy mag dolgozzon nincs más teendőnk, mint a fentebb említett függvényt egyszerűen kiszedni a programunkból, ami ez után valahogy így néz ki:

            <programlisting language="c"><![CDATA[int main() {
	while(1){}
	return 0;
}]]>
            </programlisting>

	    Ezt szintén lefordítva és elindítva láthatjuk, hogy az előzővel ellentétben már csak egy mag dolgozik 100%-on.

	    Az utolsó feladattal jóval egyszerűbb a dolgunk, mint az elsőnél volt, itt ugyanis a végtelen ciklusunkon belül mindössze egy sleep() függvényre van szükségünk,
	    ehhez viszont includeolni kell a &lt;unistd.h&gt; könyvtárat, amiben a sleep függvény deklarálva van. A kódunk ez után így nézhet ki:

            <programlisting language="c"><![CDATA[#include <unistd.h>

int main() {
	while(1){
		sleep(1);
	}
	return 0;
}]]>
            </programlisting>
	</para>            
    </section>        
        
    <section>
        <title>Lefagyott, nem fagyott, akkor most mi van?</title>
        <para>
            Mutasd meg, hogy nem lehet olyan programot írni, amely bármely más programról eldönti, hogy le fog-e fagyni vagy sem!
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:  tegyük fel, hogy akkora haxorok vagyunk, hogy meg tudjuk írni a <function>Lefagy</function>
            függvényt, amely tetszőleges programról el tudja dönteni, hogy van-e benne vlgtelen ciklus:              
        </para>
        <programlisting language="c"><![CDATA[Program T100
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	main(Input Q)
	{
		Lefagy(Q)
	}
}]]></programlisting>            
        <para>
            A program futtatása, például akár az előző <filename>v.c</filename> ilyen pszeudókódjára:
            <screen><![CDATA[T100(t.c.pseudo)
true]]></screen>            
            akár önmagára
            <screen><![CDATA[T100(T100)
false]]></screen>  
            ezt a kimenetet adja.          
        </para>
        <para>
            A T100-as programot felhasználva készítsük most el az alábbi T1000-set, amelyben a
            Lefagy-ra épőlő Lefagy2 már nem tartalmaz feltételezett, csak csak konkrét kódot:
        </para>
        <programlisting language="c"><![CDATA[Program T1000
{

	boolean Lefagy(Program P)
	{
		 if(P-ben van végtelen ciklus)
			return true;
		 else
			return false; 
	}

	boolean Lefagy2(Program P)
	{
		 if(Lefagy(P))
			return true;
		 else
			for(;;); 
	}

	main(Input Q)
	{
		Lefagy2(Q)
	}

}]]></programlisting>            
        <programlisting><![CDATA[]]></programlisting>            
        <para>
            Mit for kiírni erre a <computeroutput>T1000(T1000)</computeroutput> futtatásra?
                                
            <itemizedlist>
                <listitem>
                    <para>Ha T1000 lefagyó, akkor nem fog lefagyni, kiírja, hogy true</para>                        
                </listitem>
                <listitem>
                    <para>Ha T1000 nem fagyó, akkor pedig le fog fagyni...</para>                        
                </listitem>
            </itemizedlist>
            akkor most hogy fog működni? Sehogy, mert ilyen <function>Lefagy</function>
            függvényt, azaz a T100 program nem is létezik.                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
        <para>Nem tudunk olyan programot írni, ami megmondja egy másikról, hogy le fog-e fagyni, vagy nem, azaz van -e benne végtelen ciklus, vagy sem, mert lehetetlen eldönteni.</para>
    </section>        
                
    <section>
        <title>Változók értékének felcserélése</title>
        <para>
            Írj olyan C programot, amely felcseréli két változó értékét, bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk">https://bhaxor.blog.hu/2018/08/28/10_begin_goto_20_avagy_elindulunk</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/theefues/prog1/blob/master/turing/varchange.c">https://github.com/theefues/prog1/blob/master/turing/varchange.c</link> 
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
	<para>
	Adott két szám, jelen esetben a és b. Ha a helyére felvesszük az a+b összeg értékét, majd b helyére felvesszük az immáron (a+b)-b eredményét, majd azt visszarakjuk az a változóba úgy, hogy (a+b)-((a+b)-b), akkor felcseréljük a két eredeti változó értékét.
	</para>
    </section>                     

    <section>
        <title>Labdapattogás</title>
        <para>
            Először if-ekkel, majd bármiféle logikai utasítás vagy kifejezés
            nasználata nélkül írj egy olyan programot, ami egy labdát pattogtat a karakteres konzolon! (Hogy mit értek
            pattogtatás alatt, alább láthatod a videókon.)
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2018/08/28/labdapattogas">https://bhaxor.blog.hu/2018/08/28/labdapattogas</link>
        </para>
        <para>
            Megoldás forrása: Kód: Bátfai Norbert <link xlink:href="https://github.com/theefues/prog1/tree/master/turing/labda">https://github.com/theefues/prog1/tree/master/turing/labda</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
        <para>Fordítás: gcc labda.c -o labda -lncurses</para>
        <para>Futtatás: ./labda</para>
	<para>A forrás mindkét esetben adott volt. Mindenek előtt, includeolnunk kell a szükséges könyvtárakat. Most az stdio, curses és az unistd könyvtárakra lesz szükségünk.
	Az if-es módszerrel egyszerű a dolgunk: csak meg kell nézni, hol jár jelenleg a labda. Le kell kérnünk, mekkora a terminál ablakunk. Ezt az initscr() függvénnyel tehetjük meg.
	Emellé deklarálnunk kell segédváltozókat, ami a labda helyzetének, lépegetési értékének és a terminálablak méretének meghatározásában segít majd minket.</para>
	<programlisting language="c"><![CDATA[
#include <stdio.h>
#include <curses.h>
#include <unistd.h>

int main(void) {
WINDOW *ablak;
ablak = initscr();

int x = 0; /* labda helyzete */
int y = 0;

int xnov = 1; /* lépegetési érték */
int ynov = 1;

int mx; /* terminál mérete */
int my;
}
]]></programlisting>
	<para>A végtelen ciklusunkba fel kell vennünk egy getmaxyx() függvényt, így dinamikusan fog működni a programunk, szóval ha változtatunk a terminál méretén, a labdánk hozzá igazodik.</para>
	<para>Kirajzoltatjuk a labdánkat a mvprintw() függvénnyel, ahol a már korábban dekralált változókban tároljuk a helyzetét, valamint a karakterét, ami itt egy nagy O betű lesz.</para>    
	<para>A refresh() függvénnyel frissítjük a programot, hogy a labda ne csak egy helyben álljon, hanem "pattogjon" a képernyőn. Az usleep() függvénnyel pedig a gyorsaságát állíthatjuk. Minél kisebb az érték, annál gyorsabb a labda.</para>
	<para>Az x és y értékekhez hozzáadjuk a lépegetési értékeket, ezzel halad előre a labdánk. Végül if függvényekkel megvizsgáljuk, hogy elérte-e a terminálablak széleit és ennek megfelelően irányítjuk a továbbiakban. Negatív értéket adunk neki, így az ellenkező irányba fog tovább haladni és nem megy a határvonalon kívülre.</para>
        <programlisting language="c"><![CDATA[
for ( ;; ) {
	getmaxyx ( ablak, my , mx );
	mvprintw ( y, x, "O" );
	refresh ();
        usleep ( 100000 );
	x = x + xnov;
        y = y + ynov;
if ( x>=mx-1 ) {
            xnov = xnov * -1;
        }
        if ( x<=0 ) {
            xnov = xnov * -1;
        }
        if ( y<=0 ) {
            ynov = ynov * -1;
        }
        if ( y>=my-1 ) {
            ynov = ynov * -1;
        }
}
]]></programlisting>
	<caution><title>lncurses</title><para>Figyelnünk kell, hogy fordításnál gcc esetében adjuk hozzá az -lncurses kapcsolót a végére, másképp nem fog lefordulni!</para></caution>
	<para>Ugyanez a feladat megvalósítható logikai függvények használata nélkül is: magyarán nincs szükségünk ifekre, hogy megnézzük, mikor csapódik neki a labda az ablak szélének.</para>
</section>                     

    <section>
        <title>Szóhossz és a Linus Torvalds féle BogoMIPS</title>
        <para>
            Írj egy programot, ami megnézi, hogy hány bites a szó a gépeden, azaz mekkora az <type>int</type> mérete.
            Használd ugyanazt a while ciklus fejet, amit Linus Torvalds a BogoMIPS rutinjában! 
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/theefues/prog1/blob/master/turing/bitshift.c">https://github.com/theefues/prog1/blob/master/turing/bitshift.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
        <para>Fordítás: gcc bitshift.c -o bitshift</para>
        <para>Futtatás: ./bitshift</para>
	<para>Adott a szó, jelen esetben az 1, ami a b integer változóban van felvéve. A b-t elshifteljük eggyel addig, amíg 0-át nem kapunk, tehát be nem telítjük a memóriánkat, amin túl már nem tudunk többet írni. Így megkapjuk, mekkora egy szó mérete bitben.</para>
    </section>                     

    <section>
        <title>Helló, Google!</title>
        <para>
            Írj olyan C programot, amely egy 4 honlapból álló hálózatra kiszámolja a négy lap Page-Rank 
            értékét!
        </para>
        <para>
            Megoldás videó: <link xlink:href=""></link>
        </para>
        <para>
            Megoldás forrása: Kód: Bátfai Norbert <link xlink:href="https://github.com/theefues/prog1/blob/master/turing/pagerank.c">https://github.com/theefues/prog1/blob/master/turing/pagerank.c</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
        <para>Fordítás: gcc pagerank.c -o pagerank -lm</para>
        <para>Futtatás: ./pagerank</para>
        <para>A pagerank egy olyan algoritmus - amelyet például a Google keresőmotorja is használ, a PageRank, mint kifejezés az ő tulajdonukban áll - ami különböző oldalakhoz számokat rendel, ezáltal rangsorolja őket. Arra épít, hogy ha A oldalról átkattintasz hiperlink segítségével B oldalra, akkor az
        A oldal után a B oldal tartalma is érdekel, tehát egyfajta szavazatként fogható fel a B oldal számára. Minél több hiperlink mutat erre az oldalra, annál fontosabb, így feljebb kerül a rangsorban.</para>
        <para>Ebben a feladatban adott 4 oldal, amikre a program kiszámolja a pagerank értékeket. Egy 4 elemű tömbben helyezkednek el az oldalak, mindegyik külön értékekkel rendelkezik.</para>
    <programlisting language='c'><![CDATA[
void
kiir (double tomb[], int db){
	
	int i;
	
	for (i=0; i<db; ++i){
		printf("%f\n",tomb[i]);
	}
}

double
tavolsag (double PR[], double PRv[], int n){
	
	int i;
	double osszeg=0;
	
	for (i = 0; i < n; ++i)
		osszeg += (PRv[i] - PR[i]) * (PRv[i] - PR[i]);
	
	return sqrt(osszeg);
}

void
pagerank(double T[4][4]){
	double PR[4] = { 0.0, 0.0, 0.0, 0.0 };
	double PRv[4] = { 1.0/4.0, 1.0/4.0, 1.0/4.0, 1.0/4.0};
	
	int i, j;
	
	for(;;){
		
		
		for (i=0; i<4; i++){
			PR[i]=0.0;
			for (j=0; j<4; j++){
				PR[i] = PR[i] + T[i][j]*PRv[j];
			}
		}
	
			if (tavolsag(PR,PRv,4) < 0.0000000001) 
				break;
		
			
			for (i=0;i<4; i++){
				PRv[i]=PR[i];
			}	
	}
	
	kiir (PR, 4);
}
    ]]></programlisting>
    <para>Elkészítünk három funkciót: a kiir, a tavolsag és a pagerank függvényeket. A kiir a pagerank értékek kiírását fogja elvégezni, a tavolsag az oldalak közötti távolság négyzetgyökét adja majd vissza, míg
    a pagerank kiszámítja nekünk a pagerank értékét a fentebb említett 2 másik függvény segítségével.</para>
    <para>A pagerankon belül felbeszünk két, 4 elemű tömböt PR és a PRv néven. A PR minden eleme 0 lesz, igyanis ebbe fogjuk belerakni az oldalak pagerankját később, a PRv pedig a mátrixműveletekben lesz segítségünkre.</para>
    <para>Felvesszük az int i és j változókat a for ciklusok változóinak, majd nyitunk egy végtelen ciklust, ami akkor fog kilépni, ha a távolság 0.0000000001-nél kisebb lesz.</para>
    <para>A végtelen cikluson belül el kell helyeznünk 2 for ciklust, ami összeszorozza az argumentumokban megadott T mátrixot a PRv tömbbel, ezzel kiszámítva a pagerankot.</para>
    <para>Majd ha ezekkel megvagyunk, átrakjuk a PRv értékeit a PR tömbbe, aztán a kiir függvénnyel kiíratjuk.</para>
    <para>A mainen belül már nincs más dolgunk, csak deklarálnunk a pagerank mátrixunkat és a pagerank(mátrix) segítségével kiíratni az értékeket.</para>
    <programlisting language='c'><![CDATA[
int main (void){
	double L[4][4] = {
		{0.0,  0.0,      1.0/3.0,  0.0},
		{1.0,  1.0/2.0,  1.0/3.0,  1.0},
		{0.0,  1.0/2.0,  0.0,      0.0},
		{0.0,  0.0, 	 1.0/3.0,  0.0}
	};	
	
	printf("PageRank\n");
	pagerank(L);

	return 0;
}
    ]]></programlisting>
    </section>

    <section xml:id="Brun">
        <title>100 éves a Brun tétel</title>
        <para>
            Írj R szimulációt a Brun tétel demonstrálására!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/xbYhp9G6VqQ">https://youtu.be/xbYhp9G6VqQ</link>
        </para>
        <para>
            Megoldás forrása: Kód: Bátfai Norbert <link xlink:href="https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R">https://gitlab.com/nbatfai/bhax/blob/master/attention_raising/Primek_R</link>
        </para>
        <para>Tutor: Iloshvai Áron</para>
        <programlisting language='r'><![CDATA[
library(matlab)

stp <- function(x){

    primes = primes(x)
    diff = primes[2:length(primes)]-primes[1:length(primes)-1]
    idx = which(diff==2)
    t1primes = primes[idx]
    t2primes = primes[idx]+2
    rt1plust2 = 1/t1primes+1/t2primes
    return(sum(rt1plust2))
}

x=seq(13, 1000000, by=10000)
y=sapply(x, FUN = stp)
plot(x,y,type="b")
        ]]></programlisting>
    <para>Ez az R szimuláció bebizonyítja, hogy véges sok számú ikerprím létezik. Minél nagyobbak a számok, annál kisebb az ikerprímek előfordulásának esélye. A program megvizsgál minden prímet a megadott intervallumban, majd kiírja őket.</para>
    </section>
    
    <section xml:id="bhax-textbook-feladatok-turing.MontyHall">
        <title>A Monty Hall probléma</title>
        <para>
            Írj R szimulációt a Monty Hall problémára!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan">https://bhaxor.blog.hu/2019/01/03/erdos_pal_mit_keresett_a_nagykonyvben_a_monty_hall-paradoxon_kapcsan</link>
        </para>
        <para>
            Megoldás forrása: Kód: Bátfai Norbert <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/MontyHall_R</link>
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat:
        </para>
        <programlisting language='r'><![CDATA[
kiserletek_szama=10000000
kiserlet = sample(1:3, kiserletek_szama, replace=T)
jatekos = sample(1:3, kiserletek_szama, replace=T)
musorvezeto=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    if(kiserlet[i]==jatekos[i]){
    
        mibol=setdiff(c(1,2,3), kiserlet[i])
    
    }else{
    
        mibol=setdiff(c(1,2,3), c(kiserlet[i], jatekos[i]))
    
    }

    musorvezeto[i] = mibol[sample(1:length(mibol),1)]

}

nemvaltoztatesnyer= which(kiserlet==jatekos)
valtoztat=vector(length = kiserletek_szama)

for (i in 1:kiserletek_szama) {

    holvalt = setdiff(c(1,2,3), c(musorvezeto[i], jatekos[i]))
    valtoztat[i] = holvalt[sample(1:length(holvalt),1)]
    
}

valtoztatesnyer = which(kiserlet==valtoztat)


sprintf("Kiserletek szama: %i", kiserletek_szama)
length(nemvaltoztatesnyer)
length(valtoztatesnyer)
length(nemvaltoztatesnyer)/length(valtoztatesnyer)
length(nemvaltoztatesnyer)+length(valtoztatesnyer)

        ]]></programlisting>
    <para>Adott három ajtó. A háromból 2 ajtó mögött nincs semmi, míg a maradék egy mögött van. Ez a paradoxon azt vizsgálja, hogy megéri-e variálni a nyitás sorrendjén annak érdekében, hogy közelebb kerüljünk a nyereményhez.</para>
     <figure>
            <title>A Monty Hall paradoxon - Kép: Bátfai Norbert</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/montyhall.png" scale="70"/>
                </imageobject>
            </mediaobject>
        </figure>
    </section>

</chapter>                
